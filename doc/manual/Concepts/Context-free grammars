## Context-Free Grammars

A context-free grammar can be used to match most of the constructs found in a programming language. It is a step up on the Chomsky hierarchy from the regular expressions matched by the lexer: this means that it can match a more specific set of languages - importantly, those languages that contain nested constructs. That is, a regular expression can match a sequence of open brackets followed by a sequence of close brackets -‘()’, ‘(()))’, ‘((()’ - but a context free grammar can restrict that to a language where every open bracket must be matched by a corresponding close bracket - ‘()’, ‘(())’, ‘((()))’.

Such a grammar is built out of three basic items: ‘terminals’ - tokens generated by the lexer, ‘nonterminals’ - symbols made up as strings of other symbols and a ‘start symbol’ - a special nonterminal that matches the entire language. A string matched by a particular nonterminal is called a ‘production’; a given nonterminal can contain one or more productions if necessary. In TameParse, a terminal symbol is expressed as an identifier (for example, ‘string’), and a nonterminal is expressed as an identifier in angle brackets (for example, ‘&lt;Statement>’)

A TameParse production is written out in the following form:

    <Brackets> = ‘(‘ ‘)’

This specifies a nonterminal that matches an open bracket followed by a close bracket. Productions can refer to nonterminals as well as terminal symbols, so we can add another production to create a bracket matching language:

    <Brackets> |= ‘(‘ <Brackets> ‘)’

### EBNF

This language is a variant of ‘Backus-Naur Form’ (BNF), a standard way of defining grammars. This allows you to express any context-free language but can be quite verbose for describing languages with repeating or optional structures. TameParse supports additional features, known as ‘Extended Backus-Naur Form’ (EBNF) which allows a more concise definition.

EBNF adds three new operators. ‘\*’ and ‘\+’ can be used to specify that an item repeats - ‘\*’ indicates 0 or more times, and ‘+’ indicates 1 or more. For instance, here is how to specify a sequence of commas:

    <SomeCommas> = ‘,’*

‘?’ can be used to specify that an item is optional. For example:

    <OptionalComma> = ‘,’?

Finally, EBNF adds the ability to group things using brackets: this is useful for combining items for use with the other operators:

    <FunctionArgumentList> = <Argument> (‘,’ <Argument>)*

