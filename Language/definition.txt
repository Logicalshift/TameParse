///
/// Parser Language Definition
///
/// Created by Andrew Hunter on 21/05/2011
///

language ParserLanguage {
	/// Symbols used by the lexer
	lexer-symbols {
		// Commonly used character sets
		letter 			= /[A-Za-z\-]/
		digit 			= /[0-9]/
		alphanumeric 	= /({letter}|{digit})/
		whitespace		= /[ \n\r]/
		anycharacter	= /[^ \n\r]/
		
		// Identifiers, regular expressions
		identifier		= /{letter}{alphanumeric}*/
		regex			= /\/([^\/]|(\\\/))*\//
	}

	/// Lexical symbols
	lexer {
		identifier		= /{identifier}/
		nonterminal		= /\<{identifier}\>/
		regex			= /{regex}/
		string			= /"([^"]|(\\"))*"/
		character		= /'(.|\\.)'/
	}
	
	// Ignored symbols
	ignore {
		newline			= /[\n\r]/
		whitespace		= /[ ]/
		comment			= /\/\/({anycharacter}*)/
	}
	
	/// Keywords
	/// (We use very few keywords, to extend the range of identifiers available)
	keywords {
	}
	
	/// The grammar itself
	grammar {
	
		//
		// The top-level definitions
		//
		
		<Language-Definition>	::= (<TopLevel-Block>)*
		
		<TopLevel-Block>		::= <Language-Block>
		
		<Language-Block>		::= language identifier (<Language-Inherits>)? '{' (<Language-Definition>)* '}'
		
		<Language-Inherits>		::= ':' identifier
		
		//
		// The language block
		//
		
		<Language-Definition>	::= <Lexer-Symbols-Definition>
								  | <Lexer-Definition>
								  | <Ignore-Definition>
								  | <Weak-Symbols-Definition>
								  | <Keywords-Definition>
								  | <Grammar-Definition>
								
		//
		// Basic language items
		//
		
		<Lexer-Symbols-Definition>	::= lexer-symbols '{' (<Lexeme-Definition>)* '}'
		
		<Lexer-Definition> 			::= lexer '{' (<Lexeme-Definition>)* '}'
		
		<Ignore-Definition>			::= ignore '{' (<Lexeme-Definition> | identifier)* '}'
		
		<Keywords-Definition>		::= keywords '{' (<Keyword-Definition>)* '}'
		
		<Keyword-Definition>		::= identifier
									  | identifier '=' string
									  | identifier '=' character
		
		<Weak-Symbols-Definition>	::= weak-lexer '{' (<Lexeme-Definition>)* '}'
		
		<Lexeme-Definition> 		::= identifier '=' regex
									  | identifier '=' identifier '.' identifier
		
		//
		// Defining grammars
		//
		
		<Grammar-Definition>		::= grammar '{' (<Nonterminal-Definition>)* '}'
		
		<Nonterminal-Definition>	::= <Nonterminal> "::=" <Production> ('|' <Production>)* newline
									  | <Nonterminal> "+=" <Production> ('|' <Production>)* newline
									  | replace <Nonterminal> "::=" <Production> ('|' <Production>)* newline
		
		<Production>				::= (Ebnf-Item)*
		
		<Ebnf-Item>					::= <Simple-Ebnf-Item>
									  | <Simple-Ebnf-Item> '|' <Ebnf-Item>
		
		<Simple-Ebnf-Item>			::= <Nonterminal>
									  | <Terminal>
									  | <Simple-Ebnf-Item> '*'
									  | <Simple-Ebnf-Item> '+'
									  | <Simple-Ebnf-Item> '?'
									  | '(' <Ebnf-Item> ')'
		
		<Nonterminal>				::= nonterminal
									  | identifier '.' nonterminal
		
		<Terminal>					::= <Basic-Terminal>
									  | identifier '.' <Basic-Terminal>
		
		<Basic-Terminal>			::= identifier
									  | string
									  | character
	}
}
