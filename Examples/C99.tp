///
/// C99 grammar
///

import "AnsiC.tp"

language C99 : Ansi-C {
	///
	/// New keywords defined in C99
	///
	keywords {
		inline		restrict	_Bool		_Complex	_Imaginary
	}

	///
	/// Lexical changes
	///
	lexer {
		constant-hex		|= /0[xX]{hex-digit}+(LL|ll)/
		constant-octal		|= /0{digit}+(LL|ll)/
		constant-decimal	|= /{digit}+(ll|LL)/
	}

	///
	/// Modified grammar
	///
	grammar {
		<Type-Specifier>				+= _Bool
										 | _Complex
										 | _Imaginary
			
		<Type-Qualifier>				+= restrict
	
		<Function-Specifier>			= inline
	
		<Direct-Declarator>				+= <Direct-Declarator> '[' static <Type-Qualifier>* <Assignment-Expression> ']'
										 | <Direct-Declarator> '[' <Type-Qualifier>* static <Assignment-Expression> ']'
			
		<Declaration-Specifiers>		+= <Function-Specifier> <Declaration-Specifiers>?

		replace <Compound-Statement> 	= '{' <Block-Item>* '}'

		<Block-Item>					= <Statement>
										| <Declaration>
		
		replace <Iteration-Statement>	= while '(' <Expression> ')' <Statement>
										| do <Statement> while '(' <Expression> ')'
										| <For-Statement>
		
		<For-Statement>					= for '(' <Expression-Statement> <Expression-Statement> <Expression>? ')' <Statement>
										| for '(' [=> <Declaration>] <Declaration> <Expression-Statement> <Expression>? ')' <Statement>

	}
}

///
/// Tests for the C99 language
///
test C99 {
	///
	/// Full program tests
	///
	<Translation-Unit> =
		helloworld("
			int main(int arc, const char* argv[]) {
				printf(\"Hello, world\");
			}
		")
	
	<Declaration> = 			"int *restrict x;"
								"restrict int* x;"
								"_Bool x;"
								"_Complex x;"
								"_Imaginary x;"
								"int x=0;"

	<Compound-Statement> =		"{ int x; x = x + 1; }"
								"{ foo(); int x; x = x + 1; }"
								"{ f*x; int x; x = x + 1; int y; }"

	<Iteration-Statement> =		"for (int x=0; x<1; x++) { }"
								"for (x=0; x<1; x++) { }"
								"for (;;) { }"
								"for (x=0;;x++) { }"
								"for (int x=0;;x++) { }"
								"for (int x=0;;) { }"
								"for (;x<3;) { }"
								"for (;;x++) { }"

	<Primary-Expression> =		"(some_struct) { 1,2,3 }"
								"(some_struct) { 1,2,3, }"
	
	<Declaration> =				"struct {int a[3], b;} w[] = { [0].a = {1}, [1].a = 2 };"
								"struct {int a, b, c, d;} s = { .a = 1, .c = 3, 4, .b = 5};"

	<Constant> =				"\"\\u0abc \U0abc0abc\""
								"100LL"
								"100ll"
								"100ULL"
								"100ull"
}
