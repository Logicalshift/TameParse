///
/// ANSI C grammar
///
/// Based on Jutta Degener's YACC grammar
/// <http://www.lysator.liu.se/c/ANSI-C-grammar-y.html>
///
/// Converted to TameParse format by Andrew Hunter
///

///
/// ANSI C is a context-sensitive language by default. It is only LR(1) provided that the
/// compiler makes a note of which identifiers refer to types in which contexts. This makes
/// it a hard target for traditional parsers.
///
/// TameParse can do something which traditional parsers cannot: make decisions about which
/// parse tree to follow based on context. This parser does not require type context to
/// recognise C programs, and will produce a 'best guess' parse tree where ambiguous
/// identifiers are resolved using their most likely interpretation.
///
/// This gives a major advantage over traditional C parsers: it can interpret fragments of
/// code without the need for context and produce meaningful results. There are comments
/// below talking about the specific ambiguities, but here's a summary of what you'll
/// encounter in the parse tree:
///
///   Casts:		many ambiguities. (x)(y) is either a cast or a function call depending
///					on if x is a type or not, and there are other cases that are similarly
///   				confusing. <Unambiguous-Cast> and <Ambiguous-Cast> explictly separate
///					the cases. Some unambiguous casts may end up in ambiguous cast.
///	
///	  Sizeof:		sizeof(x) could be the size of the variable x or the type x depending
///					on how x is defined. We assume x is a type.
///
///   Declarations:	'extern foo;' could be a declaration of 'foo' without a type or
///					an object of type 'foo' without a name. We assume it's the former.
///
///					Perhaps more weirdly, 'foo bar;' could be two different things. However
///					if both foo and bar are types this is an error so there's no real
///					ambiguity here. This parser will accept 'foo bar baz;' as a statement
///					because it's in the spec even if it makes no sense.
///
///   Parameters:	'int foo(bar);' could declare a function with an int parameter called
///					'bar' or an anonymous parameter of type 'bar'. We assume the latter.
///
///   Statements:	'x * y;' could be x multiplied by y and discarded, or a declaration of
///					y as a pointer to x. We always interpret it as the latter if we can.
///

language Ansi-C {
	///
	/// Character types
	///
	lexer-symbols {
		comment-start 		= "/*"
		comment-end			= "*/"
		cpp-comment-start	= "//"

		line-separator		= /[\n\r]/
		whitespace			= /({line-separator}|[ \t])/

		digit				= /[0-9]/
		letter				= /[a-zA-Z_]/
		alphanumeric		= /({digit}|{letter})/
		hex-digit			= /[0-9A-Fa-f]/
		exponent			= /[Ee][+\-]?{digit}+/
		float-specifier		= /[fFlL]/
		int-specifier		= /[uUlL]+/
	}

	///
	/// ANSI C keywords
	///
	keywords {
		auto		break		case		char 		const		continue
		default		do 			double 		else 		enum 		extern 
		float 		for 		goto 		if 			int 		long 
		register 	return 		short 		signed 		sizeof 		static 
		struct 		switch 		typedef 	union 		unsigned 	void 
		volatile 	while
	}

	///
	/// Ignored sections: comments and whitespace
	///
	ignore {
		comment 			= 	/{comment-start}([^*]|\*[^\/]){comment-end}/
		cpp-comment			= 	/{cpp-comment-start}[^\n\r]*/
		whitespace			= 	/{whitespace}+/
		doc-comment			= 	/{comment-start}\*([^*]|*[^\/]){comment-end}/
		doc-comment			|=	/{cpp-comment-start}\/[^\n\r]*/
	}

	///
	/// Lexical symbols
	///
	/// We define some extra lexical symbols for the various types of C constant over
	/// Jutta Deneger's version to make it easier to decide how to interpret these
	/// values later on.
	///
	lexer {
		identifier			= 	/{letter}{alphanumeric}*/
		constant-hex		= 	/0[xX]{hex-digit}+{int-specifier}?/
		constant-octal		= 	/0{digit}+{int-specifier}?/
		constant-decimal	= 	/{digit}+{int-specifier}?/
		constant-character	= 	/L?'(\\.|[^\\'])+'/
		constant-float		= 	/{digit}+{exponent}{float-specifier}?/
		constant-float		|= 	/{digit}*\.{digit}+{exponent}?{float-specifier}?/
		constant-float		|=	/{digit}+\.{digit}*{exponent}?{float-specifier}?/
		string-literal		=	/L?\"(\\.|[^\\\"])*\"/
	}

	grammar {
		<Constant>						= constant-hex
										| constant-octal
										| constant-decimal
										| constant-float
										| constant-character
										| string-literal
	
		<Primary-Expression>			= identifier
										| <Constant>
										| '(' <Expression> ')'
	
		<Postfix-Expression>			= <Primary-Expression>
										| <Postfix-Expression> '[' <Expression> ']'
										| <Postfix-Expression> '(' <Argument-Expression-List>? ')'
										| <Postfix-Expression> '.' identifier
										| <Postfix-Expression> "->" identifier
										| <Postfix-Expression> "++"
										| <Postfix-Expression> "--"
	
		<Argument-Expression-List>		= <Assignment-Expression> (',' <Assignment-Expression>)*	
	
		//
		// sizeof(x) is slightly ambiguous. We'll treat 'x' as a type name if we can
		//
		<Unary-Expression>				= <Postfix-Expression>
										| "++" <Unary-Expression>
										| "--" <Unary-Expression>
										| ('&' | '*' | '+' | '-' | '~' | '!') <Cast-Expression>
										| sizeof <Unary-Expression>
										| sizeof [=> '(' <Type-Name>] '(' <Type-Name> ')'
	
		//
		// Casts are interesting as they are ambiguous with function calls in a few situations
		//
		// Specifically: (x)(y) can be a cast of y to x or a call to function variable x
		// depending on if x was previously declared as a type or a variable.
		//
		// We would like to produce several cases for this, so that the parser does not need
		// to know how things are declared to proceed.
		//
		// Unambiguous cast: '( <Type-Name> ')' <Not-A-Parameter-List>
		// Ambiguous cast: '(' identifier ')' <Maybe-A-Parameter-List>
		// Multi-level ambiguous cast: '(' identifier ')' '(' identifier ')' '(' ... ')'
		// Function call: '(' identifier ')' '(' <x> ',' <y> ')'
		//
		// We resolve the ambiguous cases as casts for now.
		//
		<Cast-Expression>				= <Unary-Expression>
										| <Unambiguous-Cast> <Cast-Expression>
										| <Ambiguous-Cast> <Cast-Expression>
										// | '(' <Type-Name> [=> ')' <Cast-Expression>] ')' <Cast-Expression>
		
		//
		// (int)(x), (foo const)(x), (foo) x, etc are all definitely casts
		//
		<Unambiguous-Cast>				= '(' [=>[can-clash] <Unambiguous-Cast-Follow>] <Type-Name> ')'

		<Unambiguous-Cast-Follow>		= <Simple-Type-Specifier>											// int, void, etc
										| <Type-Qualifier>													// const, volatile
										| identifier (<Simple-Type-Specifier> | <Type-Qualifier>)			// foo const etc
										| identifier <Abstract-Declarator>? ')' ("++" <Unary-Expression> | "--" <Unary-Expression> | '&' | '*' | '~' | '!' | sizeof | identifier | <Constant>)

		//
		// (x)+1, (x)-1 and (x)(y) are all ambiguous and might be a cast or something else
		// depending on the type of x
		//
		<Ambiguous-Cast>				= '(' [=>[can-clash] <Ambiguous-Cast-Follow>] <Type-Name> ')'

		<Ambiguous-Cast-Follow>			= identifier <Abstract-Declarator>? ')' ('+' | '-' | '(' <Expression> ')')
			
		<Multiplicative-Expression>		= <Cast-Expression>
										| <Multiplicative-Expression> ('*' | '/' | '%') <Cast-Expression>
			
		<Additive-Expression>			= <Multiplicative-Expression>
										| <Additive-Expression> ('+' | '-') <Multiplicative-Expression>
			
		<Shift-Expression>				= <Additive-Expression>
										| <Shift-Expression> ("<<" | ">>") <Additive-Expression>
			
		<Relational-Expression>			= <Shift-Expression>
										| <Relational-Expression> ('<' | '>' | "<=" | ">=") <Shift-Expression>
			
		<Equality-Expression>			= <Relational-Expression>
										| <Equality-Expression> ("==" | "!=") <Relational-Expression>
			
		<And-Expression>				= <Equality-Expression>
										| <And-Expression> '&' <Equality-Expression>
			
		<Exclusive-Or-Expression>		= <And-Expression>
										| <Exclusive-Or-Expression> '^' <And-Expression>
			
		<Inclusive-Or-Expression>		= <Exclusive-Or-Expression>
										| <Inclusive-Or-Expression> '|' <Exclusive-Or-Expression>
			
		<Logical-And-Expression>		= <Inclusive-Or-Expression>
										| <Logical-And-Expression> "&&" <Inclusive-Or-Expression>
			
		<Logical-Or-Expression>			= <Logical-And-Expression>
										| <Logical-Or-Expression> "||" <Logical-And-Expression>
			
		<Conditional-Expression>		= <Logical-Or-Expression>
										| <Logical-Or-Expression> '?' <Expression> ':' <Conditional-Expression>
			
		<Assignment-Expression>			= <Conditional-Expression>
										| <Unary-Expression> ('=' | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=") <Assignment-Expression>
			
		<Expression>					= <Assignment-Expression>
										| <Expression> ',' <Assignment-Expression>
			
		<Constant-Expression>			= <Conditional-Expression>
	
		///
		/// Declarations
		///
		/// C's syntax is ambiguous if you don't know if an identifier is a type name or not.
		/// This definition will accept identifiers as variable names wherever they can be,
		/// which is the usual interpretation.
		///
		///    Example:
		///		   extern fred;
		///
		/// 'fred' could be a type (and this would be a useless declaration) or a variable 
		/// name (and an implicit int). The former is almost certainly a bug, and the latter
		/// is bad practice. We interpret things as if they were in the latter format.
		///
		/// A compiler that cares about this might want to check for empty type specifiers
		/// or init declarators that specify the name of an existing type.
		///
		/// The guard ensures that this:
		///
		/// 	extern fred fred;
		///
		/// is interpreted correctly (the first fred can only be a type and the second can
		/// only be sensibly interpreted as a variable name)
		///
		<Declaration>					= <Declaration-Specifiers> [=>[can-clash] ';' | <Init-Declarator> (';' | ',')] <Init-Declarator-List>? ';'
	
		<Declaration-Specifiers>		= (<Storage-Class-Specifier> | <Type-Specifier> | <Type-Qualifier>)+
			
		<Init-Declarator-List>			= <Init-Declarator> (',' <Init-Declarator>)*
			
		<Init-Declarator>				= <Declarator> ('=' <Initializer>)?
	
		<Storage-Class-Specifier>		= typedef
										| extern
										| static
										| auto
										| register
			
		<Type-Specifier>				= void
										| char
										| short
										| int
										| long
										| float
										| double
										| signed
										| unsigned
										| <Struct-Or-Union-Specifier>
										| <Enum-Specifier>
										| identifier
			
		<Simple-Type-Specifier>			= void
										| char
										| short
										| int
										| long
										| float
										| double
										| signed
										| unsigned
										| <Struct-Or-Union-Specifier>
										| <Enum-Specifier>
			
		<Struct-Or-Union-Specifier>		= (struct | union) identifier ('{' <Struct-Declaration>* '}')?	
										| (struct | union) ('{' <Struct-Declaration>* '}')
	
		<Struct-Declaration>			= <Specifier-Qualifier-List> [=> <Struct-Declarator-List> ';'] <Struct-Declarator-List> ';'
	
		<Specifier-Qualifier-List>		= (<Type-Specifier> | <Type-Qualifier>)+
	
		<Struct-Declarator-List>		= <Struct-Declarator> (',' <Struct-Declarator>)*

		<Struct-Declarator>				= <Declarator> (':' <Constant-Expression>)?
										| ':' <Constant-Expression>
			
		<Enum-Specifier>				= enum identifier? '{' <Enumerator-List> '}'
										| enum identifier
			
		<Enumerator-List>				= <Enumerator> (',' <Enumerator>)*
	
		<Enumerator>					= identifier ('=' <Constant-Expression>)?
	
		<Type-Qualifier>				= const | volatile
	
		<Declarator>					= <Pointer> <Direct-Declarator>
										| <Direct-Declarator>
			
		<Direct-Declarator>				= identifier
										| '(' <Declarator> ')'
										| <Direct-Declarator> '[' <Constant-Expression>? ']'
										| <Direct-Declarator> '(' ([=> <Parameter-Type-List> ')'] <Parameter-Type-List> | <Identifier-List>) ')'
										| <Direct-Declarator> '(' ')'
	
		<Pointer>						= '*'
										| '*' <Type-Qualifier>* <Pointer>
	
		<Parameter-Type-List>			= <Parameter-Declarator> (',' <Parameter-Declarator>)* (',' "...")?
	
		///
		/// Parameter declarators
		///
		/// Given a function definition like foo(fred), it is ambiguous as to whether or not
		/// fred is the name of a type or the name of a variable which is implicitly assumed
		/// to be an int.
		///
		/// The former interpretation is generally the correct one.
		///
		/// However, here we will interpret anything that can be interpreted as a declaration
		/// in such a manner, so this will take the latter approach. Compilers need to be
		/// aware of this and rewrite the tree as necessary.
		///
		/// (A more complicated and potentially more correct approach might be to always treat
		/// the first identifier as a declaration specifier and future ones as a declarator.
		/// This would require a more complicated grammar, however)
		///
		<Parameter-Declarator>			= <Declaration-Specifiers> ([=> <Declarator> (',' | ')')] <Declarator> | <Abstract-Declarator>)?	
	
		<Identifier-List>				= identifier (',' identifier)*
			
		<Type-Name>						= <Specifier-Qualifier-List> <Abstract-Declarator>?
	
		<Abstract-Declarator>			= <Pointer> <Direct-Abstract-Declarator>?
										| <Direct-Abstract-Declarator>
		
		<Direct-Abstract-Declarator>	= '(' (<Abstract-Declarator> | <Parameter-Type-List>)? ')'
										| '[' <Constant-Expression>? ']'
										| <Direct-Abstract-Declarator> '[' <Constant-Expression>? ']'
										| <Direct-Abstract-Declarator> '(' <Parameter-Type-List>? ')'
		
		<Initializer>					= <Assignment-Expression>
										| '{' <Initializer> (',' <Initializer>)* ','? '}'

		<Statement>						= <Labeled-Statement>
										| <Compound-Statement>
										| <Expression-Statement>
										| <Selection-Statement>
										| <Iteration-Statement>
										| <Jump-Statement>
		
		<Labeled-Statement>				= identifier ':' <Statement>
										| case <Constant-Expression> ':' <Statement>
										| default ':' <Statement>
		
		<Compound-Statement>			= '{' <Declaration-List>? <Statement-List>? '}'

		///
		/// Declaration list
		///
		/// C has yet another ambiguity here (this is one you'll find cited as a classic)
		/// The 'declaration' x * y; has two interpretations. This could be the statement
		/// with no effect 'x multiplied by y' or the declaration 'y is a pointer to x'.
		///
		/// When this ambiguity arises, we take the latter interpretation; the no effect
		/// statement is going to be a rare case.
		///
		<Declaration-List>				= ([=> <Declaration>] <Declaration>)+

		<Statement-List>				= <Statement>+

		<Expression-Statement>			= <Expression>? ';'

		<Selection-Statement>			= if '(' <Expression> ')' <Statement>
										| if '(' <Expression> ')' <Statement> else[conflict=shift] <Statement>
										| switch '(' <Expression> ')' <Statement>
		
		<Iteration-Statement>			= while '(' <Expression> ')' <Statement>
										| do <Statement> while '(' <Expression> ')'
										| for '(' <Expression-Statement> <Expression-Statement> <Expression>? ')' <Statement>

		<Jump-Statement>				= goto identifier ';'
										| continue ';'
										| break ';'
										| return ';'
										| return <Expression> ';'
		
		<Translation-Unit>				= <External-Declaration>+

		<External-Declaration>			= <Function-Definition>
										| <Declaration>
		
		///
		/// Function declarations
		///
		/// These are also pretty ambiguous when you don't know if an identifier is a type
		/// or not. We treat things as declarators if their context is such that they can
		/// be treated this way, which can require a potentially large amount of lookahead.
		///
		<Function-Definition>			= <Declaration-Specifiers> [=>[can-clash] <Declarator> <Declaration-List>? '{'] <Declarator> <Declaration-List>? <Compound-Statement>
										| [=> <Declarator> <Declaration-List>? '{'] <Declarator> <Declaration-List>? <Compound-Statement>
	}
}

///
/// Tests for the Ansi C language
///
test Ansi-C {
	///
	/// Full program tests
	///
	<Translation-Unit> =
		helloworld("
			int main(int arc, const char* argv[]) {
				printf(\"Hello, world\");
			}
		")
}
