#!/usr/bin/perl

##
## Converts the UnicodeData.txt file into a C database
##

# Iterate through stdin, which should be UnicodeData.txt file
$charRanges = { };
$uppercase = [ ];
$lowercase = [ ];

while ($_ = <>) {
	# Split into fields
	@fields = split /;/;

	# Get the character number and type
	$charNum 	= hex($fields[0]);
	$charType	= $fields[2];

	# Get the range array for this value
	$rangeArray = $charRanges->{$charType};

	$size = @$rangeArray;
	if ($size == 0) {
		# Just add a single range if the array is empty
		push(@$rangeArray, [ $charNum, $charNum ]);
	} else {
		# Get the last item
		$lastRange = $rangeArray->[-1];

		# Compare to the character
		if ($lastRange->[1] == $charNum - 1) {
			# Just update the range
			$lastRange->[1] = $charNum;
		} else {
			# Start a new range
			push(@$rangeArray, [ $charNum, $charNum ]);
		}
	}

	# Store in the hash
	$charRanges->{$charType} = $rangeArray;

	# Get the uppercase and lowercase values
	$uc = hex($fields[12]);
	$lc = hex($fields[13]);

	if ($uc > 0) {
		# There's a map to an uppercase character
		if (@$uppercase == 0) {
			# Just add a new item (character range, initial uppercase value)
			push(@$uppercase, [ $charNum, $charNum + 1, $uc ]);
		} else {
			# Fetch the last value
			$last = $uppercase->[-1];

			# Update it if it maps to the appropriate uppercase characters
			if ($last->[1] == $charNum && ($uc - $last->[2]) == ($charNum - $last->[0])) {
				$last->[1] = $charNum + 1;
			} else {
				# Otherwise, create a new entry
				push(@$uppercase, [ $charNum, $charNum + 1, $uc ]);
			}
		}
	}

	if ($lc > 0) {
		# There's a map to a lowercase value
		if (@$lowercase == 0) {
			# Just add a new item (character range, initial lowercase value)
			push(@$lowercase, [ $charNum, $charNum + 1, $lc ]);
		} else {
			# Fetch the last value
			$last = $lowercase->[-1];

			# Update it if it maps to the appropriate lowercase characters
			if ($last->[1] == $charNum && ($lc - $last->[2]) == ($charNum - $last->[0])) {
				$last->[1] = $charNum + 1;
			} else {
				# Otherwise, create a new entry
				push(@$lowercase, [ $charNum, $charNum + 1, $lc ]);
			}
		}
	}
}

print "/* Unicode character type table generated by unicode.pl */\n\n";

# Generate variables for each character type
$first = 1;
foreach my $key (keys %$charRanges) {
	print "static unicode::range s_Range$key\[] = { ";

	$rangeArray = $charRanges->{$key};
	foreach my $range (@$rangeArray) {
		$start = $range->[0];
		$end = $range->[1] + 1;
		print "{ $start, $end }, ";
	}
	print "{ -1, -1 }";
	print " };\n";

	$first = 0;
}

# Generate the list of unicode blocks
print "\nconst unicode::block unicode::s_Blocks[] = {";
$count = 0;
foreach my $key (keys %$charRanges) {
	print "\n    { \"$key\", s_Range$key },";
	$count++;
}
print "\n    { NULL, NULL }\n};\n";
print "\nconst unicode::block* unicode::s_EndBlock = s_Blocks + $count;\n";

# Generate the array of uppercase values
print "\nconst int unicode::s_UppercaseMap[][3] = {\n    ";
$first = 1;
foreach my $range (@$uppercase) {
	if ($first == 0) {
		print ", ";
	}
	print "{ ", $range->[0], ", ", $range->[1], ", ", $range->[2], " }";
	$first = 0;
}
print " };\n";

# ... and the array of lowercase values
print "\nconst int unicode::s_LowercaseMap[][3] = {\n    ";
$first = 1;
foreach my $range (@$lowercase) {
	if ($first == 0) {
		print ", ";
	}
	print "{ ", $range->[0], ", ", $range->[1], ", ", $range->[2], " }";
	$first = 0;
}
print " };\n";
