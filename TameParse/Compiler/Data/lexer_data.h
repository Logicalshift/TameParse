//
//  lexer_data.h
//  TameParse
//
//  Created by Andrew Hunter on 12/11/2011.
//  Copyright (c) 2011 __MyCompanyName__. All rights reserved.
//

#ifndef _COMPILER_DATA_LEXER_DATA_H
#define _COMPILER_DATA_LEXER_DATA_H

#include <vector>
#include <map>

#include "TameParse/Compiler/Data/lexer_item.h"

namespace compiler {
    ///
    /// \brief Data generated by the compiler to represent a lexer
    ///
    class lexer_data {
    public:
    	/// \brief List of lexer items
    	typedef std::vector<lexer_item> item_list;

    	/// \brief Maps items to their definitions
    	typedef std::map<std::wstring, item_list> definition_map;

    	/// \brief Iterator for this data
    	typedef definition_map::const_iterator iterator;

    private:
    	/// \brief The definitions in this lexer data
    	mutable definition_map m_Definitions;

    public:
    	/// \brief Adds a new lexer definition to this object
    	void add_definition(const std::wstring& term, const lexer_item& newItem);

    	/// \brief Removes all of th definitions for a terminal with a particular name from this item
    	void remove_definition(const std::wstring& term);

    	/// \brief Returns all of the definitions for a particular terminal value
    	const item_list& get_definitions(const std::wstring& term) const;

    	/// \brief The first item defined in this data object
    	iterator begin() const;

    	/// \brief The item after the final item defined in this data object
    	iterator end() const;
    };
}

#endif
